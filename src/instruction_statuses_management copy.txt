now we are in the status Management part , I will give you the APIs one by one :
1- API Get All statuses http://127.0.0.1:8000/api/statuses :
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be something like :"
[
    {
        "id": 2,
        "description": "this description is for the test slug in the new status",
        "slug": "test",
        "created_at": "2025-09-10T17:08:20.000000Z",
        "updated_at": "2025-09-11T14:27:01.000000Z"
    },
    {
        "id": 3,
        "description": "T2",
        "slug": "another test",
        "created_at": "2025-09-11T14:24:53.000000Z",
        "updated_at": "2025-09-11T14:24:53.000000Z"
    },
    {
        "id": 4,
        "description": "this is a big description for testing the creation of a status",
        "slug": "another test 2",
        "created_at": "2025-09-11T14:27:54.000000Z",
        "updated_at": "2025-09-11T14:27:54.000000Z"
    }
]
"

2- API Create status (POST) http://127.0.0.1:8000/api/statuses :
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :"
{
    "description": "this is a big description for testing the creation of a status",
    "slug": "another test 2"
}
", 
if the auth token was valid the success result will be something like :"
{
    "description": "this is a big description for testing the creation of a status",
    "slug": "another test 2",
    "updated_at": "2025-09-11T14:27:54.000000Z",
    "created_at": "2025-09-11T14:27:54.000000Z",
    "id": 4
}"
and here is the validation rules from the backend :"
{'description' => 'required|string',
'slug' => 'nullable|string|max:255|unique:positions,slug'}"

3- API Get status By ID http://127.0.0.1:8000/api/statuses/4 :
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be something like :"
{
    "id": 4,
    "description": "this is a big description for testing the creation of a status",
    "slug": "another test 2",
    "created_at": "2025-09-11T14:27:54.000000Z",
    "updated_at": "2025-09-11T14:27:54.000000Z"
}"

4- API Update status (PUT) http://127.0.0.1:8000/api/statuses/1:
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :" 
{
    "description": "this description is for the test slug in the new status",
    "slug": "test"
}"
if the auth token was valid the success result will be something like :"
{
    "id": 2,
    "description": "this description is for the test slug in the new status",
    "slug": "test",
    "created_at": "2025-09-10T17:08:20.000000Z",
    "updated_at": "2025-09-11T14:27:01.000000Z"
}"

and here is the validation rules from the backend :"
'description' => 'required|string',
'slug' => ['nullable', 'string', 'max:255', Rule::unique('statuses', 'slug')->ignore($status->id)]"

5- API Delete status (Delete) http://127.0.0.1:8000/api/statuses/1 :
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be a 204 response no content 
