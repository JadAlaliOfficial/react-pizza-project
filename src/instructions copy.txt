I have the following APIs :
1- API Get All Users https://auth.pnepizza.com/api/v1/users?per_page=10&search=&role= :
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "data": {
        "current\_page": 1,
        "data": [
            {
                "id": 1,
                "name": "Adler Morgan",
                "email": "adlermorgan12@gmail.com",
                "email\_verified\_at": "2025-08-12T16:35:55.000000Z",
                "created\_at": "2025-08-12T16:35:55.000000Z",
                "updated\_at": "2025-08-12T16:35:55.000000Z",
                "roles": [
                    {
                        "id": 1,
                        "name": "super-admin",
                        "guard\_name": "web",
                        "created\_at": "2025-08-12T16:35:55.000000Z",
                        "updated\_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "model\_type": "App\\\\Models\\\\User",
                            "model\_id": 1,
                            "role\_id": 1
                        }
                    }
                ],
                "permissions": []
            },
            {
                "id": 5,
                "name": "charlie",
                "email": "charliemiller1118@gmail.com",
                "email\_verified\_at": "2025-08-13T14:14:43.000000Z",
                "created\_at": "2025-08-13T14:13:29.000000Z",
                "updated\_at": "2025-08-13T14:14:43.000000Z",
                "roles": [
                    {
                        "id": 1,
                        "name": "super-admin",
                        "guard\_name": "web",
                        "created\_at": "2025-08-12T16:35:55.000000Z",
                        "updated\_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "model\_type": "App\\\\Models\\\\User",
                            "model\_id": 5,
                            "role\_id": 1
                        }
                    }
                ],
                "permissions": []
            }
        ],
        "first\_page\_url": "https://auth.pnepizza.com/api/v1/users?page=1",
        "from": 1,
        "last\_page": 1,
        "last\_page\_url": "https://auth.pnepizza.com/api/v1/users?page=1",
        "links": [
            {
                "url": null,
                "label": "&laquo; Previous",
                "active": false
            },
            {
                "url": "https://auth.pnepizza.com/api/v1/users?page=1",
                "label": "1",
                "active": true
            },
            {
                "url": null,
                "label": "Next &raquo;",
                "active": false
            }
        ],
        "next\_page\_url": null,
        "path": "https://auth.pnepizza.com/api/v1/users",
        "per\_page": 10,
        "prev\_page\_url": null,
        "to": 2,
        "total": 2
    }
}"

and in case of fail the answer will be :"
{
    "message": "Unauthenticated."
}"

2- API Get All Roles https://auth.pnepizza.com/api/v1/roles:
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "data": {
        "current_page": 1,
        "data": [
            {
                "id": 1,
                "name": "super-admin",
                "guard_name": "web",
                "created_at": "2025-08-12T16:35:55.000000Z",
                "updated_at": "2025-08-12T16:35:55.000000Z",
                "permissions": [
                    {
                        "id": 1,
                        "name": "manage users",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "role_id": 1,
                            "permission_id": 1
                        }
                    },
                    {
                        "id": 2,
                        "name": "manage roles",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "role_id": 1,
                            "permission_id": 2
                        }
                    },
                    {
                        "id": 3,
                        "name": "manage permissions",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "role_id": 1,
                            "permission_id": 3
                        }
                    },
                    {
                        "id": 4,
                        "name": "manage service clients",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "role_id": 1,
                            "permission_id": 4
                        }
                    },
                    {
                        "id": 5,
                        "name": "manage auth rules",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "role_id": 1,
                            "permission_id": 5
                        }
                    }
                ]
            }
        ],
        "first_page_url": "https://auth.pnepizza.com/api/v1/roles?page=1",
        "from": 1,
        "last_page": 1,
        "last_page_url": "https://auth.pnepizza.com/api/v1/roles?page=1",
        "links": [
            {
                "url": null,
                "label": "&laquo; Previous",
                "active": false
            },
            {
                "url": "https://auth.pnepizza.com/api/v1/roles?page=1",
                "label": "1",
                "active": true
            },
            {
                "url": null,
                "label": "Next &raquo;",
                "active": false
            }
        ],
        "next_page_url": null,
        "path": "https://auth.pnepizza.com/api/v1/roles",
        "per_page": 15,
        "prev_page_url": null,
        "to": 1,
        "total": 1
    }
}"

3- API Get All Permissions https://auth.pnepizza.com/api/v1/permissions :
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "data": {
        "current_page": 1,
        "data": [
            {
                "id": 1,
                "name": "manage users",
                "guard_name": "web",
                "created_at": "2025-08-12T16:35:55.000000Z",
                "updated_at": "2025-08-12T16:35:55.000000Z",
                "roles": [
                    {
                        "id": 1,
                        "name": "super-admin",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "permission_id": 1,
                            "role_id": 1
                        }
                    }
                ]
            },
            {
                "id": 2,
                "name": "manage roles",
                "guard_name": "web",
                "created_at": "2025-08-12T16:35:55.000000Z",
                "updated_at": "2025-08-12T16:35:55.000000Z",
                "roles": [
                    {
                        "id": 1,
                        "name": "super-admin",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "permission_id": 2,
                            "role_id": 1
                        }
                    }
                ]
            },
            {
                "id": 3,
                "name": "manage permissions",
                "guard_name": "web",
                "created_at": "2025-08-12T16:35:55.000000Z",
                "updated_at": "2025-08-12T16:35:55.000000Z",
                "roles": [
                    {
                        "id": 1,
                        "name": "super-admin",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "permission_id": 3,
                            "role_id": 1
                        }
                    }
                ]
            },
            {
                "id": 4,
                "name": "manage service clients",
                "guard_name": "web",
                "created_at": "2025-08-12T16:35:55.000000Z",
                "updated_at": "2025-08-12T16:35:55.000000Z",
                "roles": [
                    {
                        "id": 1,
                        "name": "super-admin",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "permission_id": 4,
                            "role_id": 1
                        }
                    }
                ]
            },
            {
                "id": 5,
                "name": "manage auth rules",
                "guard_name": "web",
                "created_at": "2025-08-12T16:35:55.000000Z",
                "updated_at": "2025-08-12T16:35:55.000000Z",
                "roles": [
                    {
                        "id": 1,
                        "name": "super-admin",
                        "guard_name": "web",
                        "created_at": "2025-08-12T16:35:55.000000Z",
                        "updated_at": "2025-08-12T16:35:55.000000Z",
                        "pivot": {
                            "permission_id": 5,
                            "role_id": 1
                        }
                    }
                ]
            },
            {
                "id": 7,
                "name": "export json data",
                "guard_name": "web",
                "created_at": "2025-08-15T10:36:10.000000Z",
                "updated_at": "2025-08-15T10:36:10.000000Z",
                "roles": []
            }
        ],
        "first_page_url": "https://auth.pnepizza.com/api/v1/permissions?page=1",
        "from": 1,
        "last_page": 1,
        "last_page_url": "https://auth.pnepizza.com/api/v1/permissions?page=1",
        "links": [
            {
                "url": null,
                "label": "&laquo; Previous",
                "active": false
            },
            {
                "url": "https://auth.pnepizza.com/api/v1/permissions?page=1",
                "label": "1",
                "active": true
            },
            {
                "url": null,
                "label": "Next &raquo;",
                "active": false
            }
        ],
        "next_page_url": null,
        "path": "https://auth.pnepizza.com/api/v1/permissions",
        "per_page": 15,
        "prev_page_url": null,
        "to": 6,
        "total": 6
    }
}"

4- API Create User (POST) https://auth.pnepizza.com/api/v1/users :
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :"
 {
    "name": "Sam Smith",
    "email": "sam@example.com",
    "password": "password123",
    "password_confirmation": "password123",
    "roles": ["super-admin"],
    "permissions": ["export json data"]
}", 
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "User created successfully",
    "data": {
        "user": {
            "name": "Sam Smith",
            "email": "sam@example.com",
            "email_verified_at": "2025-08-17T10:46:27.000000Z",
            "updated_at": "2025-08-17T10:46:27.000000Z",
            "created_at": "2025-08-17T10:46:27.000000Z",
            "id": 9,
            "roles": [
                {
                    "id": 1,
                    "name": "super-admin",
                    "guard_name": "web",
                    "created_at": "2025-08-12T16:35:55.000000Z",
                    "updated_at": "2025-08-12T16:35:55.000000Z",
                    "pivot": {
                        "model_type": "App\\Models\\User",
                        "model_id": 9,
                        "role_id": 1
                    },
                    "permissions": [
                        {
                            "id": 1,
                            "name": "manage users",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 1
                            }
                        },
                        {
                            "id": 2,
                            "name": "manage roles",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 2
                            }
                        },
                        {
                            "id": 3,
                            "name": "manage permissions",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 3
                            }
                        },
                        {
                            "id": 4,
                            "name": "manage service clients",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 4
                            }
                        },
                        {
                            "id": 5,
                            "name": "manage auth rules",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 5
                            }
                        }
                    ]
                }
            ],
            "permissions": [
                {
                    "id": 7,
                    "name": "export json data",
                    "guard_name": "web",
                    "created_at": "2025-08-15T10:36:10.000000Z",
                    "updated_at": "2025-08-15T10:36:10.000000Z",
                    "pivot": {
                        "model_type": "App\\Models\\User",
                        "model_id": 9,
                        "permission_id": 7
                    }
                }
            ]
        }
    }
}"

5- API Get User by ID https://auth.pnepizza.com/api/v1/users/1 :
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be something like :"
   {
    "success": true,
    "data": {
        "user": {
            "id": 1,
            "name": "Adler Morgan",
            "email": "adlermorgan12@gmail.com",
            "email_verified_at": "2025-08-12T16:35:55.000000Z",
            "created_at": "2025-08-12T16:35:55.000000Z",
            "updated_at": "2025-08-12T16:35:55.000000Z",
            "roles": [
                {
                    "id": 1,
                    "name": "super-admin",
                    "guard_name": "web",
                    "created_at": "2025-08-12T16:35:55.000000Z",
                    "updated_at": "2025-08-12T16:35:55.000000Z",
                    "pivot": {
                        "model_type": "App\\Models\\User",
                        "model_id": 1,
                        "role_id": 1
                    },
                    "permissions": [
                        {
                            "id": 1,
                            "name": "manage users",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 1
                            }
                        },
                        {
                            "id": 2,
                            "name": "manage roles",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 2
                            }
                        },
                        {
                            "id": 3,
                            "name": "manage permissions",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 3
                            }
                        },
                        {
                            "id": 4,
                            "name": "manage service clients",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 4
                            }
                        },
                        {
                            "id": 5,
                            "name": "manage auth rules",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 5
                            }
                        }
                    ]
                }
            ],
            "permissions": []
        }
    }
}"

6- API Update User https://auth.pnepizza.com/api/v1/users/9:
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :" 
{
    "name": "Jane Smith Updated",
    "roles": [],
    "permissions": []
}"
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "User updated successfully",
    "data": {
        "user": {
            "id": 9,
            "name": "Jane Smith Updated",
            "email": "sam@example.com",
            "email_verified_at": "2025-08-17T10:46:27.000000Z",
            "created_at": "2025-08-17T10:46:27.000000Z",
            "updated_at": "2025-08-17T10:56:34.000000Z",
            "roles": [],
            "permissions": []
        }
    }
}"

7- API Delete User https://auth.pnepizza.com/api/v1/users/9 :
we should give the auth_token and the Accept is application/json in the header and there is no body , 
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "User deleted successfully"
}


8- API Assign Roles to User https://auth.pnepizza.com/api/v1/users/9:
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :" 
{
    "roles": ["super-admin"]
}"
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "Roles assigned successfully",
    "data": {
        "user": {
            "id": 10,
            "name": "Sam Smith",
            "email": "sam@example.com",
            "email_verified_at": "2025-08-17T11:02:10.000000Z",
            "created_at": "2025-08-17T11:02:10.000000Z",
            "updated_at": "2025-08-17T11:02:10.000000Z",
            "roles": [
                {
                    "id": 1,
                    "name": "super-admin",
                    "guard_name": "web",
                    "created_at": "2025-08-12T16:35:55.000000Z",
                    "updated_at": "2025-08-12T16:35:55.000000Z",
                    "pivot": {
                        "model_type": "App\\Models\\User",
                        "model_id": 10,
                        "role_id": 1
                    },
                    "permissions": [
                        {
                            "id": 1,
                            "name": "manage users",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 1
                            }
                        },
                        {
                            "id": 2,
                            "name": "manage roles",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 2
                            }
                        },
                        {
                            "id": 3,
                            "name": "manage permissions",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 3
                            }
                        },
                        {
                            "id": 4,
                            "name": "manage service clients",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 4
                            }
                        },
                        {
                            "id": 5,
                            "name": "manage auth rules",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 5
                            }
                        }
                    ]
                }
            ],
            "permissions": [
                {
                    "id": 7,
                    "name": "export json data",
                    "guard_name": "web",
                    "created_at": "2025-08-15T10:36:10.000000Z",
                    "updated_at": "2025-08-15T10:36:10.000000Z",
                    "pivot": {
                        "model_type": "App\\Models\\User",
                        "model_id": 10,
                        "permission_id": 7
                    }
                }
            ]
        }
    }
}"

9- API Give Permissions to User https://auth.pnepizza.com/api/v1/users/10/permissions/give:
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :" 
{
    "permissions": ["export json data"]
}"
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "Permissions granted successfully",
    "data": {
        "user": {
            "id": 10,
            "name": "Sam Smith",
            "email": "sam@example.com",
            "email_verified_at": "2025-08-17T11:02:10.000000Z",
            "created_at": "2025-08-17T11:02:10.000000Z",
            "updated_at": "2025-08-17T11:02:10.000000Z",
            "roles": [
                {
                    "id": 1,
                    "name": "super-admin",
                    "guard_name": "web",
                    "created_at": "2025-08-12T16:35:55.000000Z",
                    "updated_at": "2025-08-12T16:35:55.000000Z",
                    "pivot": {
                        "model_type": "App\\Models\\User",
                        "model_id": 10,
                        "role_id": 1
                    },
                    "permissions": [
                        {
                            "id": 1,
                            "name": "manage users",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 1
                            }
                        },
                        {
                            "id": 2,
                            "name": "manage roles",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 2
                            }
                        },
                        {
                            "id": 3,
                            "name": "manage permissions",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 3
                            }
                        },
                        {
                            "id": 4,
                            "name": "manage service clients",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 4
                            }
                        },
                        {
                            "id": 5,
                            "name": "manage auth rules",
                            "guard_name": "web",
                            "created_at": "2025-08-12T16:35:55.000000Z",
                            "updated_at": "2025-08-12T16:35:55.000000Z",
                            "pivot": {
                                "role_id": 1,
                                "permission_id": 5
                            }
                        }
                    ]
                }
            ],
            "permissions": [
                {
                    "id": 7,
                    "name": "export json data",
                    "guard_name": "web",
                    "created_at": "2025-08-15T10:36:10.000000Z",
                    "updated_at": "2025-08-15T10:36:10.000000Z",
                    "pivot": {
                        "model_type": "App\\Models\\User",
                        "model_id": 10,
                        "permission_id": 7
                    }
                }
            ]
        }
    }
}"

10- API Create Permission (POST) https://auth.pnepizza.com/api/v1/permissions:
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :" 
{
    "name": "export data",
    "guard_name": "web"
}"
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "Permission created successfully",
    "data": {
        "permission": {
            "guard_name": "web",
            "name": "export data",
            "updated_at": "2025-08-17T11:07:59.000000Z",
            "created_at": "2025-08-17T11:07:59.000000Z",
            "id": 8
        }
    }
}"

11- API Create Role (POST) https://auth.pnepizza.com/api/v1/roles:
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :" 
{
    "name": "Editor",
    "guard_name": "web",
    "permissions": ["export data"]
}"
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "Role created successfully",
    "data": {
        "role": {
            "guard_name": "web",
            "name": "Editor",
            "updated_at": "2025-08-17T11:09:44.000000Z",
            "created_at": "2025-08-17T11:09:44.000000Z",
            "id": 3,
            "permissions": [
                {
                    "id": 8,
                    "name": "export data",
                    "guard_name": "web",
                    "created_at": "2025-08-17T11:07:59.000000Z",
                    "updated_at": "2025-08-17T11:07:59.000000Z",
                    "pivot": {
                        "role_id": 3,
                        "permission_id": 8
                    }
                }
            ]
        }
    }
}"

12- API Assign Permissions to Role (POST) https://auth.pnepizza.com/api/v1/roles/3/permissions/assign:
we should give the auth_token and the Accept is application/json and the Conent-Type is application/json in the header
the body should look like :" 
{
    "permissions": ["export data"]
}"
if the auth token was valid the success result will be something like :"
{
    "success": true,
    "message": "Permissions assigned to role successfully",
    "data": {
        "role": {
            "id": 3,
            "name": "Editor",
            "guard_name": "web",
            "created_at": "2025-08-17T11:09:44.000000Z",
            "updated_at": "2025-08-17T11:09:44.000000Z",
            "permissions": [
                {
                    "id": 8,
                    "name": "export data",
                    "guard_name": "web",
                    "created_at": "2025-08-17T11:07:59.000000Z",
                    "updated_at": "2025-08-17T11:07:59.000000Z",
                    "pivot": {
                        "role_id": 3,
                        "permission_id": 8
                    }
                }
            ]
        }
    }
}"

and I have the following files 

-src/types/userManagement.ts :"
// User Management Types

// Base interfaces
export interface Permission {
  id: number;
  name: string;
  guard_name: string;
  created_at: string;
  updated_at: string;
  pivot?: {
    role_id?: number;
    permission_id?: number;
    model_type?: string;
    model_id?: number;
  };
  roles?: Role[];
}

export interface Role {
  id: number;
  name: string;
  guard_name: string;
  created_at: string;
  updated_at: string;
  pivot?: {
    model_type?: string;
    model_id?: number;
    role_id?: number;
    permission_id?: number;
  };
  permissions?: Permission[];
}

export interface User {
  id: number;
  name: string;
  email: string;
  email_verified_at: string | null;
  created_at: string;
  updated_at: string;
  roles: Role[];
  permissions: Permission[];
}

// Pagination interfaces
export interface PaginationLink {
  url: string | null;
  label: string;
  active: boolean;
}

export interface PaginationMeta {
  current_page: number;
  first_page_url: string;
  from: number;
  last_page: number;
  last_page_url: string;
  links: PaginationLink[];
  next_page_url: string | null;
  path: string;
  per_page: number;
  prev_page_url: string | null;
  to: number;
  total: number;
}

export interface PaginatedResponse<T> extends PaginationMeta {
  data: T[];
}

// API Response interfaces
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
}

export interface UsersResponse extends ApiResponse<PaginatedResponse<User>> {}
export interface RolesResponse extends ApiResponse<PaginatedResponse<Role>> {}
export interface PermissionsResponse extends ApiResponse<PaginatedResponse<Permission>> {}

export interface UserResponse extends ApiResponse<{ user: User }> {}
export interface RoleResponse extends ApiResponse<{ role: Role }> {}
export interface PermissionResponse extends ApiResponse<{ permission: Permission }> {}

// Form interfaces
export interface CreateUserForm {
  name: string;
  email: string;
  password: string;
  password_confirmation: string;
  roles: string[];
  permissions: string[];
}

export interface UpdateUserForm {
  name: string;
  roles: string[];
  permissions: string[];
}

export interface CreateRoleForm {
  name: string;
  guard_name: string;
  permissions: string[];
}

export interface CreatePermissionForm {
  name: string;
  guard_name: string;
}

export interface AssignRolesForm {
  roles: string[];
}

export interface AssignPermissionsForm {
  permissions: string[];
}

// Query parameters
export interface UsersQueryParams {
  per_page?: number;
  search?: string;
  role?: string;
  page?: number;
}

// Error response
export interface ErrorResponse {
  message: string;
  errors?: Record<string, string[]>;
}

// User Management State
export interface UserManagementState {
  users: User[];
  roles: Role[];
  permissions: Permission[];
  loading: boolean;
  error: string | null;
  pagination: PaginationMeta | null;
}

// Filter and search options
export interface UserFilters {
  search: string;
  role: string;
  perPage: number;
}

export interface UserManagementTab {
  id: 'users' | 'roles' | 'permissions';
  label: string;
  count?: number;
}"

-src/services/userManagementService.ts:"
import type {
  UsersResponse,
  RolesResponse,
  PermissionsResponse,
  UserResponse,
  RoleResponse,
  PermissionResponse,
  CreateUserForm,
  UpdateUserForm,
  CreateRoleForm,
  CreatePermissionForm,
  AssignRolesForm,
  AssignPermissionsForm,
  UsersQueryParams,
  ErrorResponse
} from '../types/userManagement';

const API_BASE_URL = 'https://auth.pnepizza.com/api/v1';

// Helper function to get auth headers
const getAuthHeaders = (): HeadersInit => {
  const token = localStorage.getItem('auth_token');
  return {
    'Authorization': `Bearer ${token}`,
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  };
};

// Helper function to handle API responses
const handleResponse = async <T>(response: Response): Promise<T> => {
  if (!response.ok) {
    const errorData: ErrorResponse = await response.json();
    throw new Error(errorData.message || 'An error occurred');
  }
  return response.json();
};

// Helper function to build query string
const buildQueryString = (params: Record<string, any>): string => {
  const searchParams = new URLSearchParams();
  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      searchParams.append(key, value.toString());
    }
  });
  return searchParams.toString();
};

export const userManagementService = {
  // User APIs
  async getAllUsers(params: UsersQueryParams = {}): Promise<UsersResponse> {
    const queryString = buildQueryString(params);
    const url = `${API_BASE_URL}/users${queryString ? `?${queryString}` : ''}`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: getAuthHeaders()
    });
    
    return handleResponse<UsersResponse>(response);
  },

  async getUserById(id: number): Promise<UserResponse> {
    const response = await fetch(`${API_BASE_URL}/users/${id}`, {
      method: 'GET',
      headers: getAuthHeaders()
    });
    
    return handleResponse<UserResponse>(response);
  },

  async createUser(userData: CreateUserForm): Promise<UserResponse> {
    const response = await fetch(`${API_BASE_URL}/users`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(userData)
    });
    
    return handleResponse<UserResponse>(response);
  },

  async updateUser(id: number, userData: UpdateUserForm): Promise<UserResponse> {
    const response = await fetch(`${API_BASE_URL}/users/${id}`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify(userData)
    });
    
    return handleResponse<UserResponse>(response);
  },

  async deleteUser(id: number): Promise<{ success: boolean; message: string }> {
    const response = await fetch(`${API_BASE_URL}/users/${id}`, {
      method: 'DELETE',
      headers: getAuthHeaders()
    });
    
    return handleResponse<{ success: boolean; message: string }>(response);
  },

  async assignRolesToUser(id: number, roles: AssignRolesForm): Promise<UserResponse> {
    const response = await fetch(`${API_BASE_URL}/users/${id}`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify(roles)
    });
    
    return handleResponse<UserResponse>(response);
  },

  async givePermissionsToUser(id: number, permissions: AssignPermissionsForm): Promise<UserResponse> {
    const response = await fetch(`${API_BASE_URL}/users/${id}/permissions/give`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(permissions)
    });
    
    return handleResponse<UserResponse>(response);
  },

  // Role APIs
  async getAllRoles(): Promise<RolesResponse> {
    const response = await fetch(`${API_BASE_URL}/roles`, {
      method: 'GET',
      headers: getAuthHeaders()
    });
    
    return handleResponse<RolesResponse>(response);
  },

  async createRole(roleData: CreateRoleForm): Promise<RoleResponse> {
    const response = await fetch(`${API_BASE_URL}/roles`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(roleData)
    });
    
    return handleResponse<RoleResponse>(response);
  },

  async assignPermissionsToRole(roleId: number, permissions: AssignPermissionsForm): Promise<RoleResponse> {
    const response = await fetch(`${API_BASE_URL}/roles/${roleId}/permissions/assign`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(permissions)
    });
    
    return handleResponse<RoleResponse>(response);
  },

  // Permission APIs
  async getAllPermissions(): Promise<PermissionsResponse> {
    const response = await fetch(`${API_BASE_URL}/permissions`, {
      method: 'GET',
      headers: getAuthHeaders()
    });
    
    return handleResponse<PermissionsResponse>(response);
  },

  async createPermission(permissionData: CreatePermissionForm): Promise<PermissionResponse> {
    const response = await fetch(`${API_BASE_URL}/permissions`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(permissionData)
    });
    
    return handleResponse<PermissionResponse>(response);
  }
};

export default userManagementService;"
-src/hooks/useUserManagement.tsx:"
import { useState, useEffect, useCallback } from 'react';
import type {
  User,
  Role,
  Permission,
  UserManagementState,
  UsersQueryParams,
  CreateUserForm,
  UpdateUserForm,
  CreateRoleForm,
  CreatePermissionForm,
  AssignRolesForm,
  AssignPermissionsForm,
  PaginationMeta
} from '../types/userManagement';
import { userManagementService } from '../services/userManagementService';

interface UseUserManagementReturn {
  state: UserManagementState;
  actions: {
    // User actions
    fetchUsers: (params?: UsersQueryParams) => Promise<void>;
    fetchUserById: (id: number) => Promise<User | null>;
    createUser: (userData: CreateUserForm) => Promise<boolean>;
    updateUser: (id: number, userData: UpdateUserForm) => Promise<boolean>;
    deleteUser: (id: number) => Promise<boolean>;
    assignRolesToUser: (id: number, roles: AssignRolesForm) => Promise<boolean>;
    givePermissionsToUser: (id: number, permissions: AssignPermissionsForm) => Promise<boolean>;
    
    // Role actions
    fetchRoles: () => Promise<void>;
    createRole: (roleData: CreateRoleForm) => Promise<boolean>;
    assignPermissionsToRole: (roleId: number, permissions: AssignPermissionsForm) => Promise<boolean>;
    
    // Permission actions
    fetchPermissions: () => Promise<void>;
    createPermission: (permissionData: CreatePermissionForm) => Promise<boolean>;
    
    // Utility actions
    clearError: () => void;
    setLoading: (loading: boolean) => void;
  };
}

export const useUserManagement = (): UseUserManagementReturn => {
  const [state, setState] = useState<UserManagementState>({
    users: [],
    roles: [],
    permissions: [],
    loading: false,
    error: null,
    pagination: null
  });

  const setLoading = useCallback((loading: boolean) => {
    setState(prev => ({ ...prev, loading }));
  }, []);

  const setError = useCallback((error: string | null) => {
    setState(prev => ({ ...prev, error, loading: false }));
  }, []);

  const clearError = useCallback(() => {
    setState(prev => ({ ...prev, error: null }));
  }, []);

  // User actions
  const fetchUsers = useCallback(async (params: UsersQueryParams = {}) => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.getAllUsers(params);
      
      if (response.success && response.data) {
        const { data: users, ...pagination } = response.data;
        setState(prev => ({
          ...prev,
          users,
          pagination,
          loading: false
        }));
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to fetch users');
    }
  }, [setLoading, clearError, setError]);

  const fetchUserById = useCallback(async (id: number): Promise<User | null> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.getUserById(id);
      
      if (response.success && response.data) {
        setLoading(false);
        return response.data.user;
      }
      return null;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to fetch user');
      return null;
    }
  }, [setLoading, clearError, setError]);

  const createUser = useCallback(async (userData: CreateUserForm): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.createUser(userData);
      
      if (response.success) {
        // Refresh users list
        await fetchUsers();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to create user');
      return false;
    }
  }, [setLoading, clearError, setError, fetchUsers]);

  const updateUser = useCallback(async (id: number, userData: UpdateUserForm): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.updateUser(id, userData);
      
      if (response.success) {
        // Refresh users list
        await fetchUsers();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to update user');
      return false;
    }
  }, [setLoading, clearError, setError, fetchUsers]);

  const deleteUser = useCallback(async (id: number): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.deleteUser(id);
      
      if (response.success) {
        // Refresh users list
        await fetchUsers();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to delete user');
      return false;
    }
  }, [setLoading, clearError, setError, fetchUsers]);

  const assignRolesToUser = useCallback(async (id: number, roles: AssignRolesForm): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.assignRolesToUser(id, roles);
      
      if (response.success) {
        // Refresh users list
        await fetchUsers();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to assign roles');
      return false;
    }
  }, [setLoading, clearError, setError, fetchUsers]);

  const givePermissionsToUser = useCallback(async (id: number, permissions: AssignPermissionsForm): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.givePermissionsToUser(id, permissions);
      
      if (response.success) {
        // Refresh users list
        await fetchUsers();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to assign permissions');
      return false;
    }
  }, [setLoading, clearError, setError, fetchUsers]);

  // Role actions
  const fetchRoles = useCallback(async () => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.getAllRoles();
      
      if (response.success && response.data) {
        setState(prev => ({
          ...prev,
          roles: response.data!.data,
          loading: false
        }));
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to fetch roles');
    }
  }, [setLoading, clearError, setError]);

  const createRole = useCallback(async (roleData: CreateRoleForm): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.createRole(roleData);
      
      if (response.success) {
        // Refresh roles list
        await fetchRoles();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to create role');
      return false;
    }
  }, [setLoading, clearError, setError, fetchRoles]);

  const assignPermissionsToRole = useCallback(async (roleId: number, permissions: AssignPermissionsForm): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.assignPermissionsToRole(roleId, permissions);
      
      if (response.success) {
        // Refresh roles list
        await fetchRoles();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to assign permissions to role');
      return false;
    }
  }, [setLoading, clearError, setError, fetchRoles]);

  // Permission actions
  const fetchPermissions = useCallback(async () => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.getAllPermissions();
      
      if (response.success && response.data) {
        setState(prev => ({
          ...prev,
          permissions: response.data!.data,
          loading: false
        }));
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to fetch permissions');
    }
  }, [setLoading, clearError, setError]);

  const createPermission = useCallback(async (permissionData: CreatePermissionForm): Promise<boolean> => {
    try {
      setLoading(true);
      clearError();
      const response = await userManagementService.createPermission(permissionData);
      
      if (response.success) {
        // Refresh permissions list
        await fetchPermissions();
        return true;
      }
      return false;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to create permission');
      return false;
    }
  }, [setLoading, clearError, setError, fetchPermissions]);

  return {
    state,
    actions: {
      // User actions
      fetchUsers,
      fetchUserById,
      createUser,
      updateUser,
      deleteUser,
      assignRolesToUser,
      givePermissionsToUser,
      
      // Role actions
      fetchRoles,
      createRole,
      assignPermissionsToRole,
      
      // Permission actions
      fetchPermissions,
      createPermission,
      
      // Utility actions
      clearError,
      setLoading
    }
  };
};

export default useUserManagement;"
-src/pages/createPermission.tsx:"import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUserManagement } from '@/hooks/useUserManagement';
import type { CreatePermissionForm } from '@/types/userManagement';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { ArrowLeft, Key, Plus, Info } from 'lucide-react';
import { Link } from 'react-router-dom';

interface FormErrors {
  name?: string;
  guard_name?: string;
}

const CreatePermission: React.FC = () => {
  const navigate = useNavigate();
  const { state, actions } = useUserManagement();
  const { loading, error } = state;
  const { createPermission } = actions;

  const [formData, setFormData] = useState<CreatePermissionForm>({
    name: '',
    guard_name: 'web'
  });

  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = (): boolean => {
    const errors: FormErrors = {};

    // Name validation
    if (!formData.name.trim()) {
      errors.name = 'Permission name is required';
    } else if (formData.name.trim().length < 2) {
      errors.name = 'Permission name must be at least 2 characters long';
    } else if (!/^[a-zA-Z0-9\s_-]+$/.test(formData.name.trim())) {
      errors.name = 'Permission name can only contain letters, numbers, spaces, underscores, and hyphens';
    }

    // Guard name validation
    if (!formData.guard_name.trim()) {
      errors.guard_name = 'Guard name is required';
    } else if (!/^[a-zA-Z0-9_]+$/.test(formData.guard_name.trim())) {
      errors.guard_name = 'Guard name can only contain letters, numbers, and underscores';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when user starts typing
    if (formErrors[name as keyof FormErrors]) {
      setFormErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    try {
      await createPermission(formData);
      navigate('/user-management', { 
        state: { message: 'Permission created successfully!' }
      });
    } catch (err) {
      console.error('Failed to create permission:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getPermissionPreview = () => {
    if (!formData.name.trim()) return null;
    
    const name = formData.name.trim();
    const action = name.split(' ')[0]?.toLowerCase() || 'action';
    const resource = name.split(' ')[1]?.toLowerCase() || 'resource';
    
    const colors: { [key: string]: string } = {
      'create': 'bg-green-100 text-green-800',
      'read': 'bg-blue-100 text-blue-800',
      'update': 'bg-yellow-100 text-yellow-800',
      'delete': 'bg-red-100 text-red-800',
      'manage': 'bg-purple-100 text-purple-800',
      'view': 'bg-cyan-100 text-cyan-800',
    };
    
    return colors[action] || 'bg-gray-100 text-gray-800';
  };

  const permissionExamples = [
    { name: 'create users', description: 'Allow creating new users' },
    { name: 'read posts', description: 'Allow viewing posts' },
    { name: 'update profile', description: 'Allow updating user profiles' },
    { name: 'delete comments', description: 'Allow deleting comments' },
    { name: 'manage settings', description: 'Allow managing system settings' },
    { name: 'view reports', description: 'Allow viewing reports and analytics' },
  ];

  const handleExampleClick = (exampleName: string) => {
    setFormData(prev => ({ ...prev, name: exampleName }));
    if (formErrors.name) {
      setFormErrors(prev => ({ ...prev, name: undefined }));
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="flex items-center gap-4 mb-6">
        <Link to="/user-management">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to User Management
          </Button>
        </Link>
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Create New Permission</h1>
          <p className="text-muted-foreground mt-1">
            Create a new permission that can be assigned to roles and users
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <form onSubmit={handleSubmit} className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Key className="h-5 w-5" />
                  Permission Information
                </CardTitle>
                <CardDescription>
                  Enter the details for the new permission
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Permission Name *</Label>
                  <Input
                    id="name"
                    name="name"
                    type="text"
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="Enter permission name (e.g., create users, read posts)"
                    className={formErrors.name ? 'border-destructive' : ''}
                  />
                  {formErrors.name && (
                    <p className="text-sm text-destructive">{formErrors.name}</p>
                  )}
                  <p className="text-xs text-muted-foreground">
                    Use a descriptive name like "action resource" (e.g., "create users", "read posts")
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="guard_name">Guard Name *</Label>
                  <Input
                    id="guard_name"
                    name="guard_name"
                    type="text"
                    value={formData.guard_name}
                    onChange={handleInputChange}
                    placeholder="Enter guard name (e.g., web, api)"
                    className={formErrors.guard_name ? 'border-destructive' : ''}
                  />
                  {formErrors.guard_name && (
                    <p className="text-sm text-destructive">{formErrors.guard_name}</p>
                  )}
                  <p className="text-xs text-muted-foreground">
                    Guard name defines the authentication context (usually 'web' for web applications)
                  </p>
                </div>

                {/* Permission Preview */}
                {formData.name.trim() && (
                  <div className="space-y-2">
                    <Label>Preview</Label>
                    <div className="p-3 border rounded-md bg-muted/50">
                      <Badge className={getPermissionPreview() || undefined}>
                        {formData.name.trim()}
                      </Badge>
                      <p className="text-xs text-muted-foreground mt-2">
                        Guard: {formData.guard_name}
                      </p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            <div className="flex justify-end gap-4">
              <Link to="/user-management">
                <Button type="button" variant="outline">
                  Cancel
                </Button>
              </Link>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Creating Permission...
                  </>
                ) : (
                  <>
                    <Plus className="h-4 w-4 mr-2" />
                    Create Permission
                  </>
                )}
              </Button>
            </div>
          </form>
        </div>

        <div className="space-y-6">
          {/* Permission Examples */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Info className="h-4 w-4" />
                Permission Examples
              </CardTitle>
              <CardDescription>
                Click on any example to use it as a template
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {permissionExamples.map((example, index) => (
                  <div
                    key={index}
                    onClick={() => handleExampleClick(example.name)}
                    className="cursor-pointer p-3 rounded-lg border hover:border-primary/50 hover:bg-primary/5 transition-all"
                  >
                    <Badge className="mb-2">
                      {example.name}
                    </Badge>
                    <p className="text-xs text-muted-foreground">
                      {example.description}
                    </p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Permission Naming Guidelines */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Naming Guidelines</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div>
                  <h4 className="font-medium text-green-700">✓ Good Examples:</h4>
                  <ul className="list-disc list-inside text-muted-foreground mt-1 space-y-1">
                    <li>create users</li>
                    <li>read posts</li>
                    <li>update profile</li>
                    <li>delete comments</li>
                    <li>manage settings</li>
                  </ul>
                </div>
                <div>
                  <h4 className="font-medium text-red-700">✗ Avoid:</h4>
                  <ul className="list-disc list-inside text-muted-foreground mt-1 space-y-1">
                    <li>CreateUser (camelCase)</li>
                    <li>user.create (dots)</li>
                    <li>create-user (hyphens in action)</li>
                    <li>CRUD (too vague)</li>
                  </ul>
                </div>
                <div className="pt-2 border-t">
                  <h4 className="font-medium mb-2">Format:</h4>
                  <p className="text-muted-foreground">
                    <code className="bg-muted px-1 rounded">action resource</code>
                  </p>
                  <p className="text-xs text-muted-foreground mt-1">
                    Use lowercase with spaces between words
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {error && (
        <div className="fixed bottom-4 right-4 bg-destructive text-destructive-foreground p-4 rounded-md shadow-lg">
          <p className="font-medium">Error</p>
          <p className="text-sm">{error}</p>
        </div>
      )}
    </div>
  );
};

export default CreatePermission;"
-src/pages/CreateRole.tsx:"
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUserManagement } from '@/hooks/useUserManagement';
import type { CreateRoleForm, Permission } from '@/types/userManagement';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ArrowLeft, Shield, Key, Plus } from 'lucide-react';
import { Link } from 'react-router-dom';

interface FormErrors {
  name?: string;
  guard_name?: string;
  permissions?: string;
}

interface LocalRoleForm {
  name: string;
  guard_name: string;
  permissions: number[];
}

const CreateRole: React.FC = () => {
  const navigate = useNavigate();
  const { state, actions } = useUserManagement();
  const { permissions, loading, error } = state;
  const { fetchPermissions, createRole } = actions;

  const [formData, setFormData] = useState<LocalRoleForm>({
    name: '',
    guard_name: 'web',
    permissions: []
  });

  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  useEffect(() => {
    fetchPermissions();
  }, []);

  const validateForm = (): boolean => {
    const errors: FormErrors = {};

    // Name validation
    if (!formData.name.trim()) {
      errors.name = 'Role name is required';
    } else if (formData.name.trim().length < 2) {
      errors.name = 'Role name must be at least 2 characters long';
    } else if (!/^[a-zA-Z0-9\s_-]+$/.test(formData.name.trim())) {
      errors.name = 'Role name can only contain letters, numbers, spaces, underscores, and hyphens';
    }

    // Guard name validation
    if (!formData.guard_name.trim()) {
      errors.guard_name = 'Guard name is required';
    } else if (!/^[a-zA-Z0-9_]+$/.test(formData.guard_name.trim())) {
      errors.guard_name = 'Guard name can only contain letters, numbers, and underscores';
    }

    // Permissions validation
    if (formData.permissions.length === 0) {
      errors.permissions = 'At least one permission must be selected';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when user starts typing
    if (formErrors[name as keyof FormErrors]) {
      setFormErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const handlePermissionToggle = (permissionId: number) => {
    setFormData(prev => ({
      ...prev,
      permissions: prev.permissions.includes(permissionId)
        ? prev.permissions.filter(id => id !== permissionId)
        : [...prev.permissions, permissionId]
    }));
    
    // Clear permission error when user selects a permission
    if (formErrors.permissions) {
      setFormErrors(prev => ({ ...prev, permissions: undefined }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    try {
      // Convert permission IDs to strings as expected by the API
      const roleData: CreateRoleForm = {
        ...formData,
        permissions: formData.permissions.map(id => id.toString())
      };
      await createRole(roleData);
      navigate('/user-management', { 
        state: { message: 'Role created successfully!' }
      });
    } catch (err) {
      console.error('Failed to create role:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getPermissionColor = (permissionName: string) => {
    const colors: { [key: string]: string } = {
      'create': 'bg-green-100 text-green-800 hover:bg-green-200',
      'read': 'bg-blue-100 text-blue-800 hover:bg-blue-200',
      'update': 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200',
      'delete': 'bg-red-100 text-red-800 hover:bg-red-200',
      'manage': 'bg-purple-100 text-purple-800 hover:bg-purple-200',
      'view': 'bg-cyan-100 text-cyan-800 hover:bg-cyan-200',
    };
    const key = permissionName.toLowerCase().split(' ')[0] || permissionName.toLowerCase();
    return colors[key] || 'bg-gray-100 text-gray-800 hover:bg-gray-200';
  };

  const getPermissionCategories = () => {
    const categories = new Set<string>();
    permissions.forEach(permission => {
      const category = permission.name.split(' ')[1] || 'general';
      categories.add(category.toLowerCase());
    });
    return Array.from(categories).sort();
  };

  const getFilteredPermissions = () => {
    if (selectedCategory === 'all') {
      return permissions;
    }
    return permissions.filter(permission => {
      const category = permission.name.split(' ')[1] || 'general';
      return category.toLowerCase() === selectedCategory;
    });
  };

  const selectAllInCategory = () => {
    const categoryPermissions = getFilteredPermissions();
    const categoryIds = categoryPermissions.map(p => p.id);
    const allSelected = categoryIds.every(id => formData.permissions.includes(id));
    
    if (allSelected) {
      // Deselect all in category
      setFormData(prev => ({
        ...prev,
        permissions: prev.permissions.filter(id => !categoryIds.includes(id))
      }));
    } else {
      // Select all in category
      setFormData(prev => ({
        ...prev,
        permissions: [...new Set([...prev.permissions, ...categoryIds])]
      }));
    }
  };

  const getCategorySelectionStatus = () => {
    const categoryPermissions = getFilteredPermissions();
    const categoryIds = categoryPermissions.map(p => p.id);
    const selectedCount = categoryIds.filter(id => formData.permissions.includes(id)).length;
    
    if (selectedCount === 0) return 'none';
    if (selectedCount === categoryIds.length) return 'all';
    return 'partial';
  };

  if (loading && !permissions.length) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading permissions...</p>
        </div>
      </div>
    );
  }

  const categories = getPermissionCategories();
  const filteredPermissions = getFilteredPermissions();
  const selectionStatus = getCategorySelectionStatus();

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="flex items-center gap-4 mb-6">
        <Link to="/user-management">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to User Management
          </Button>
        </Link>
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Create New Role</h1>
          <p className="text-muted-foreground mt-1">
            Create a new role and assign permissions to it
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              Role Information
            </CardTitle>
            <CardDescription>
              Enter the basic information for the new role
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Role Name *</Label>
                <Input
                  id="name"
                  name="name"
                  type="text"
                  value={formData.name}
                  onChange={handleInputChange}
                  placeholder="Enter role name (e.g., Manager, Editor)"
                  className={formErrors.name ? 'border-destructive' : ''}
                />
                {formErrors.name && (
                  <p className="text-sm text-destructive">{formErrors.name}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="guard_name">Guard Name *</Label>
                <Input
                  id="guard_name"
                  name="guard_name"
                  type="text"
                  value={formData.guard_name}
                  onChange={handleInputChange}
                  placeholder="Enter guard name (e.g., web, api)"
                  className={formErrors.guard_name ? 'border-destructive' : ''}
                />
                {formErrors.guard_name && (
                  <p className="text-sm text-destructive">{formErrors.guard_name}</p>
                )}
                <p className="text-xs text-muted-foreground">
                  Guard name defines the authentication context (usually 'web' for web applications)
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Key className="h-5 w-5" />
              Permissions *
            </CardTitle>
            <CardDescription>
              Select the permissions that this role should have
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Permission Categories Filter */}
            <div className="mb-6">
              <div className="flex flex-wrap gap-2 mb-4">
                <Button
                  type="button"
                  variant={selectedCategory === 'all' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedCategory('all')}
                >
                  All ({permissions.length})
                </Button>
                {categories.map((category) => {
                  const categoryCount = permissions.filter(p => {
                    const cat = p.name.split(' ')[1] || 'general';
                    return cat.toLowerCase() === category;
                  }).length;
                  
                  return (
                    <Button
                      key={category}
                      type="button"
                      variant={selectedCategory === category ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setSelectedCategory(category)}
                    >
                      {category.charAt(0).toUpperCase() + category.slice(1)} ({categoryCount})
                    </Button>
                  );
                })}
              </div>
              
              {selectedCategory !== 'all' && (
                <div className="flex items-center gap-2 mb-4">
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={selectAllInCategory}
                  >
                    {selectionStatus === 'all' ? 'Deselect All' : 'Select All'} in {selectedCategory}
                  </Button>
                  {selectionStatus === 'partial' && (
                    <Badge variant="outline">
                      Partially Selected
                    </Badge>
                  )}
                </div>
              )}
            </div>

            {/* Permissions Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {filteredPermissions.map((permission) => (
                <div
                  key={permission.id}
                  onClick={() => handlePermissionToggle(permission.id)}
                  className={`cursor-pointer p-3 rounded-lg border-2 transition-all ${
                    formData.permissions.includes(permission.id)
                      ? 'border-primary bg-primary/5'
                      : 'border-border hover:border-primary/50'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <h4 className="font-medium text-sm">{permission.name}</h4>
                      <p className="text-xs text-muted-foreground mt-1">
                        Guard: {permission.guard_name}
                      </p>
                    </div>
                    <Badge className={getPermissionColor(permission.name)}>
                      {permission.name.split(' ')[0] || 'Permission'}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>

            {filteredPermissions.length === 0 && (
              <div className="text-center py-8">
                <Key className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">No permissions found in this category</p>
              </div>
            )}

            {formErrors.permissions && (
              <p className="text-sm text-destructive mt-4">{formErrors.permissions}</p>
            )}

            {/* Selected Permissions Summary */}
            {formData.permissions.length > 0 && (
              <>
                <Separator className="my-6" />
                <div>
                  <h4 className="font-medium mb-3">
                    Selected Permissions ({formData.permissions.length})
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {permissions
                      .filter(p => formData.permissions.includes(p.id))
                      .map((permission) => (
                        <Badge
                          key={permission.id}
                          onClick={() => handlePermissionToggle(permission.id)}
                          className={`cursor-pointer ${getPermissionColor(permission.name)}`}
                        >
                          {permission.name}
                          <span className="ml-1 text-xs">×</span>
                        </Badge>
                      ))
                    }
                  </div>
                </div>
              </>
            )}
          </CardContent>
        </Card>

        <div className="flex justify-end gap-4">
          <Link to="/user-management">
            <Button type="button" variant="outline">
              Cancel
            </Button>
          </Link>
          <Button type="submit" disabled={isSubmitting}>
            {isSubmitting ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Creating Role...
              </>
            ) : (
              <>
                <Plus className="h-4 w-4 mr-2" />
                Create Role
              </>
            )}
          </Button>
        </div>
      </form>

      {error && (
        <div className="fixed bottom-4 right-4 bg-destructive text-destructive-foreground p-4 rounded-md shadow-lg">
          <p className="font-medium">Error</p>
          <p className="text-sm">{error}</p>
        </div>
      )}
    </div>
  );
};

export default CreateRole;"
-src/pages/CreateUser.tsx :"import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUserManagement } from '@/hooks/useUserManagement';
import type { CreateUserForm, Role, Permission } from '@/types/userManagement';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ArrowLeft, UserPlus, Eye, EyeOff, Shield, Key } from 'lucide-react';
import { Link } from 'react-router-dom';

interface FormErrors {
  name?: string;
  email?: string;
  password?: string;
  password_confirmation?: string;
}

const CreateUser: React.FC = () => {
  const navigate = useNavigate();
  const {
    state: { roles, permissions, loading, error },
    actions: { fetchRoles, fetchPermissions, createUser }
  } = useUserManagement();

  const [formData, setFormData] = useState<CreateUserForm>({
    name: '',
    email: '',
    password: '',
    password_confirmation: '',
    roles: [],
    permissions: []
  });

  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    fetchRoles();
    fetchPermissions();
  }, [fetchRoles, fetchPermissions]);

  const validateForm = (): boolean => {
    const errors: FormErrors = {};

    // Name validation
    if (!formData.name.trim()) {
      errors.name = 'Name is required';
    } else if (formData.name.trim().length < 2) {
      errors.name = 'Name must be at least 2 characters long';
    }

    // Email validation
    if (!formData.email.trim()) {
      errors.email = 'Email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = 'Please enter a valid email address';
    }

    // Password validation
    if (!formData.password) {
      errors.password = 'Password is required';
    } else if (formData.password.length < 8) {
      errors.password = 'Password must be at least 8 characters long';
    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
      errors.password = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';
    }

    // Password confirmation validation
    if (!formData.password_confirmation) {
      errors.password_confirmation = 'Password confirmation is required';
    } else if (formData.password !== formData.password_confirmation) {
      errors.password_confirmation = 'Passwords do not match';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when user starts typing
    if (formErrors[name as keyof FormErrors]) {
      setFormErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const handleRoleToggle = (role: Role) => {
    setFormData(prev => ({
      ...prev,
      roles: prev.roles.includes(role.name)
        ? prev.roles.filter(name => name !== role.name)
        : [...prev.roles, role.name]
    }));
  };

  const handlePermissionToggle = (permission: Permission) => {
    setFormData(prev => ({
      ...prev,
      permissions: prev.permissions.includes(permission.name)
        ? prev.permissions.filter(name => name !== permission.name)
        : [...prev.permissions, permission.name]
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    try {
      const success = await createUser(formData);
      if (success) {
        navigate('/user-management', { 
          state: { message: 'User created successfully!' }
        });
      }
    } catch (err) {
      console.error('Failed to create user:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getRoleColor = (roleName: string) => {
    const colors: { [key: string]: string } = {
      'admin': 'bg-red-100 text-red-800 hover:bg-red-200',
      'manager': 'bg-blue-100 text-blue-800 hover:bg-blue-200',
      'user': 'bg-green-100 text-green-800 hover:bg-green-200',
      'editor': 'bg-purple-100 text-purple-800 hover:bg-purple-200',
    };
    return colors[roleName.toLowerCase()] || 'bg-gray-100 text-gray-800 hover:bg-gray-200';
  };

  const getPermissionColor = (permissionName: string) => {
    const colors: { [key: string]: string } = {
      'create': 'bg-green-100 text-green-800 hover:bg-green-200',
      'read': 'bg-blue-100 text-blue-800 hover:bg-blue-200',
      'update': 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200',
      'delete': 'bg-red-100 text-red-800 hover:bg-red-200',
    };
    const key = permissionName.toLowerCase().split(' ')[0] || permissionName.toLowerCase();
    return colors[key] || 'bg-gray-100 text-gray-800 hover:bg-gray-200';
  };

  if (loading && !roles.length && !permissions.length) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading form data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="flex items-center gap-4 mb-6">
        <Link to="/user-management">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to User Management
          </Button>
        </Link>
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Create New User</h1>
          <p className="text-muted-foreground mt-1">
            Add a new user to the system with roles and permissions
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <UserPlus className="h-5 w-5" />
              User Information
            </CardTitle>
            <CardDescription>
              Enter the basic information for the new user
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Full Name *</Label>
                <Input
                  id="name"
                  name="name"
                  type="text"
                  value={formData.name}
                  onChange={handleInputChange}
                  placeholder="Enter full name"
                  className={formErrors.name ? 'border-destructive' : ''}
                />
                {formErrors.name && (
                  <p className="text-sm text-destructive">{formErrors.name}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email Address *</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  placeholder="Enter email address"
                  className={formErrors.email ? 'border-destructive' : ''}
                />
                {formErrors.email && (
                  <p className="text-sm text-destructive">{formErrors.email}</p>
                )}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="password">Password *</Label>
                <div className="relative">
                  <Input
                    id="password"
                    name="password"
                    type={showPassword ? 'text' : 'password'}
                    value={formData.password}
                    onChange={handleInputChange}
                    placeholder="Enter password"
                    className={formErrors.password ? 'border-destructive pr-10' : 'pr-10'}
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <EyeOff className="h-4 w-4" />
                    ) : (
                      <Eye className="h-4 w-4" />
                    )}
                  </Button>
                </div>
                {formErrors.password && (
                  <p className="text-sm text-destructive">{formErrors.password}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="password_confirmation">Confirm Password *</Label>
                <div className="relative">
                  <Input
                    id="password_confirmation"
                    name="password_confirmation"
                    type={showConfirmPassword ? 'text' : 'password'}
                    value={formData.password_confirmation}
                    onChange={handleInputChange}
                    placeholder="Confirm password"
                    className={formErrors.password_confirmation ? 'border-destructive pr-10' : 'pr-10'}
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    {showConfirmPassword ? (
                      <EyeOff className="h-4 w-4" />
                    ) : (
                      <Eye className="h-4 w-4" />
                    )}
                  </Button>
                </div>
                {formErrors.password_confirmation && (
                  <p className="text-sm text-destructive">{formErrors.password_confirmation}</p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              Roles (Optional)
            </CardTitle>
            <CardDescription>
              Select roles for this user (leave empty for no role)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {roles.map((role) => (
                <div
                  key={role.id}
                  onClick={() => handleRoleToggle(role)}
                  className={`cursor-pointer p-3 rounded-lg border-2 transition-all ${
                    formData.roles.includes(role.name)
                      ? 'border-primary bg-primary/5'
                      : 'border-border hover:border-primary/50'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">{role.name}</h4>
                      <p className="text-sm text-muted-foreground">
                        {role.permissions ? role.permissions.length : 0} permissions
                      </p>
                    </div>
                    <Badge className={getRoleColor(role.name)}>
                      {role.name}
                    </Badge>
                  </div>
                  <div className="mt-2 flex flex-wrap gap-1">
                    {role.permissions && role.permissions.slice(0, 3).map((permission) => (
                      <Badge
                        key={permission.id}
                        variant="outline"
                        className="text-xs"
                      >
                        {permission.name}
                      </Badge>
                    ))}
                    {role.permissions && role.permissions.length > 3 && (
                      <Badge variant="outline" className="text-xs">
                        +{role.permissions.length - 3} more
                      </Badge>
                    )}
                  </div>
                </div>
              ))}
            </div>
            {formData.roles.length === 0 && (
              <p className="text-sm text-muted-foreground mt-2">
                No roles selected - user will be created without any role
              </p>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Key className="h-5 w-5" />
              Additional Permissions
            </CardTitle>
            <CardDescription>
              Grant additional permissions beyond those provided by roles (optional)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
              {permissions.map((permission) => (
                <div
                  key={permission.id}
                  onClick={() => handlePermissionToggle(permission)}
                  className={`cursor-pointer p-2 rounded-md border transition-all ${
                    formData.permissions.includes(permission.name)
                      ? 'border-primary bg-primary/5'
                      : 'border-border hover:border-primary/50'
                  }`}
                >
                  <Badge
                    className={`w-full justify-center ${
                      getPermissionColor(permission.name)
                    }`}
                  >
                    {permission.name}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <div className="flex justify-end gap-4">
          <Link to="/user-management">
            <Button type="button" variant="outline">
              Cancel
            </Button>
          </Link>
          <Button type="submit" disabled={isSubmitting}>
            {isSubmitting ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Creating User...
              </>
            ) : (
              <>
                <UserPlus className="h-4 w-4 mr-2" />
                Create User
              </>
            )}
          </Button>
        </div>
      </form>

      {error && (
        <div className="fixed bottom-4 right-4 bg-destructive text-destructive-foreground p-4 rounded-md shadow-lg">
          <p className="font-medium">Error</p>
          <p className="text-sm">{error}</p>
        </div>
      )}
    </div>
  );
};

export default CreateUser;
"
-src/pages/EditUser.tsx:"import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useUserManagement } from '@/hooks/useUserManagement';
import type { UpdateUserForm, User, Role, Permission } from '@/types/userManagement';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { ArrowLeft, Save, Shield, Key, User as UserIcon } from 'lucide-react';
import { Link } from 'react-router-dom';

interface FormErrors {
  name?: string;
}

const EditUser: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { state, actions } = useUserManagement();
  const { roles, permissions, loading, error } = state;
  const { fetchRoles, fetchPermissions, fetchUserById, updateUser } = actions;

  const [user, setUser] = useState<User | null>(null);
  const [formData, setFormData] = useState<UpdateUserForm>({
    name: '',
    roles: [],
    permissions: []
  });

  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoadingUser, setIsLoadingUser] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      if (!id) {
        navigate('/user-management');
        return;
      }

      try {
        setIsLoadingUser(true);
        const [userResponse] = await Promise.all([
          fetchUserById(parseInt(id)),
          fetchRoles(),
          fetchPermissions()
        ]);

        if (userResponse) {
          setUser(userResponse);
          setFormData({
            name: userResponse.name,
            roles: userResponse.roles.map(role => role.name),
            permissions: userResponse.permissions.map(permission => permission.name)
          });
        }
      } catch (err) {
        console.error('Failed to load user data:', err);
        navigate('/user-management');
      } finally {
        setIsLoadingUser(false);
      }
    };

    loadData();
  }, [id, fetchUserById, fetchRoles, fetchPermissions, navigate]);

  const validateForm = (): boolean => {
    const errors: FormErrors = {};

    // Name validation
    if (!formData.name.trim()) {
      errors.name = 'Name is required';
    } else if (formData.name.trim().length < 2) {
      errors.name = 'Name must be at least 2 characters long';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when user starts typing
    if (formErrors[name as keyof FormErrors]) {
      setFormErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const handleRoleToggle = (role: Role) => {
    setFormData(prev => ({
      ...prev,
      roles: prev.roles.includes(role.name)
        ? prev.roles.filter(name => name !== role.name)
        : [...prev.roles, role.name]
    }));
  };

  const handlePermissionToggle = (permission: Permission) => {
    setFormData(prev => ({
      ...prev,
      permissions: prev.permissions.includes(permission.name)
        ? prev.permissions.filter(name => name !== permission.name)
        : [...prev.permissions, permission.name]
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm() || !user) {
      return;
    }

    setIsSubmitting(true);
    try {
      // Update user basic info
      const success = await updateUser(user.id, {
        name: formData.name,
        roles: formData.roles,
        permissions: formData.permissions
      });

      if (success) {
        navigate('/user-management', { 
          state: { message: 'User updated successfully!' }
        });
      }
    } catch (err) {
      console.error('Failed to update user:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getUserInitials = (name: string) => {
    return name
      .split(' ')
      .map(word => word.charAt(0))
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  const getRoleColor = (roleName: string) => {
    const colors: { [key: string]: string } = {
      'admin': 'bg-red-100 text-red-800 hover:bg-red-200',
      'manager': 'bg-blue-100 text-blue-800 hover:bg-blue-200',
      'user': 'bg-green-100 text-green-800 hover:bg-green-200',
      'editor': 'bg-purple-100 text-purple-800 hover:bg-purple-200',
    };
    return colors[roleName.toLowerCase()] || 'bg-gray-100 text-gray-800 hover:bg-gray-200';
  };

  const getPermissionColor = (permissionName: string) => {
    const colors: { [key: string]: string } = {
      'create': 'bg-green-100 text-green-800 hover:bg-green-200',
      'read': 'bg-blue-100 text-blue-800 hover:bg-blue-200',
      'update': 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200',
      'delete': 'bg-red-100 text-red-800 hover:bg-red-200',
    };
    const key = permissionName.toLowerCase().split(' ')[0] || permissionName.toLowerCase();
    return colors[key] || 'bg-gray-100 text-gray-800 hover:bg-gray-200';
  };

  const hasChanges = () => {
    if (!user) return false;
    
    const originalRoles = user.roles.map(role => role.name).sort();
    const originalPermissions = user.permissions.map(permission => permission.name).sort();
    const currentRoles = [...formData.roles].sort();
    const currentPermissions = [...formData.permissions].sort();
    
    return (
      formData.name !== user.name ||
      JSON.stringify(originalRoles) !== JSON.stringify(currentRoles) ||
      JSON.stringify(originalPermissions) !== JSON.stringify(currentPermissions)
    );
  };

  if (isLoadingUser || (loading && !roles.length && !permissions.length)) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading user data...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="container mx-auto p-6 max-w-4xl">
        <div className="text-center py-12">
          <UserIcon className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <h2 className="text-2xl font-semibold mb-2">User Not Found</h2>
          <p className="text-muted-foreground mb-4">The user you're looking for doesn't exist.</p>
          <Link to="/user-management">
            <Button>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to User Management
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="flex items-center gap-4 mb-6">
        <Link to="/user-management">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to User Management
          </Button>
        </Link>
        <div className="flex items-center gap-4">
          <Avatar className="h-12 w-12">
            <AvatarFallback className="bg-primary text-primary-foreground text-lg">
              {getUserInitials(user.name)}
            </AvatarFallback>
          </Avatar>
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Edit User</h1>
            <p className="text-muted-foreground mt-1">
              Update {user.name}'s information, roles, and permissions
            </p>
          </div>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <UserIcon className="h-5 w-5" />
              User Information
            </CardTitle>
            <CardDescription>
              Update the basic information for this user
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Full Name *</Label>
                <Input
                  id="name"
                  name="name"
                  type="text"
                  value={formData.name}
                  onChange={handleInputChange}
                  placeholder="Enter full name"
                  className={formErrors.name ? 'border-destructive' : ''}
                />
                {formErrors.name && (
                  <p className="text-sm text-destructive">{formErrors.name}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email Address</Label>
                <Input
                  id="email"
                  type="email"
                  value={user.email}
                  disabled
                  className="bg-muted"
                />
                <p className="text-xs text-muted-foreground">
                  Email cannot be changed after user creation
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              Current Roles
            </CardTitle>
            <CardDescription>
              The user currently has the following roles
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2 mb-4">
              {user.roles.length > 0 ? (
                user.roles.map((role) => (
                  <Badge key={role.id} className={getRoleColor(role.name)}>
                    {role.name}
                  </Badge>
                ))
              ) : (
                <Badge variant="outline" className="text-muted-foreground">
                  No Role
                </Badge>
              )}
            </div>
            <Separator className="my-4" />
            <h4 className="font-medium mb-3">Update Roles (Optional)</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {roles.map((role) => (
                <div
                  key={role.id}
                  onClick={() => handleRoleToggle(role)}
                  className={`cursor-pointer p-3 rounded-lg border-2 transition-all ${
                    formData.roles.includes(role.name)
                      ? 'border-primary bg-primary/5'
                      : 'border-border hover:border-primary/50'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">{role.name}</h4>
                      <p className="text-sm text-muted-foreground">
                        {role.permissions ? role.permissions.length : 0} permissions
                      </p>
                    </div>
                    <Badge className={getRoleColor(role.name)}>
                      {role.name}
                    </Badge>
                  </div>
                  <div className="mt-2 flex flex-wrap gap-1">
                    {role.permissions && role.permissions.slice(0, 3).map((permission) => (
                      <Badge
                        key={permission.id}
                        variant="outline"
                        className="text-xs"
                      >
                        {permission.name}
                      </Badge>
                    ))}
                    {role.permissions && role.permissions.length > 3 && (
                      <Badge variant="outline" className="text-xs">
                        +{role.permissions.length - 3} more
                      </Badge>
                    )}
                  </div>
                </div>
              ))}
            </div>
            {formData.roles.length === 0 && (
              <p className="text-sm text-muted-foreground mt-2">
                No roles selected - user will have no role assigned
              </p>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Key className="h-5 w-5" />
              Current Direct Permissions
            </CardTitle>
            <CardDescription>
              Permissions granted directly to the user (beyond role permissions)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2 mb-4">
              {user.permissions.length > 0 ? (
                user.permissions.map((permission) => (
                  <Badge
                    key={permission.id}
                    variant="outline"
                    className={getPermissionColor(permission.name)}
                  >
                    {permission.name}
                  </Badge>
                ))
              ) : (
                <p className="text-sm text-muted-foreground">No direct permissions assigned</p>
              )}
            </div>
            <Separator className="my-4" />
            <h4 className="font-medium mb-3">Update Additional Permissions</h4>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
              {permissions.map((permission) => (
                <div
                  key={permission.id}
                  onClick={() => handlePermissionToggle(permission)}
                  className={`cursor-pointer p-2 rounded-md border transition-all ${
                    formData.permissions.includes(permission.name)
                      ? 'border-primary bg-primary/5'
                      : 'border-border hover:border-primary/50'
                  }`}
                >
                  <Badge
                    className={`w-full justify-center ${
                      getPermissionColor(permission.name)
                    }`}
                  >
                    {permission.name}
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <div className="flex justify-end gap-4">
          <Link to="/user-management">
            <Button type="button" variant="outline">
              Cancel
            </Button>
          </Link>
          <Button 
            type="submit" 
            disabled={isSubmitting || !hasChanges()}
          >
            {isSubmitting ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Updating User...
              </>
            ) : (
              <>
                <Save className="h-4 w-4 mr-2" />
                Update User
              </>
            )}
          </Button>
        </div>
      </form>

      {error && (
        <div className="fixed bottom-4 right-4 bg-destructive text-destructive-foreground p-4 rounded-md shadow-lg">
          <p className="font-medium">Error</p>
          <p className="text-sm">{error}</p>
        </div>
      )}
    </div>
  );
};

export default EditUser;"
-src/pages/UserDetail.tsx:"
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useUserManagement } from '@/hooks/useUserManagement';
import type { User } from '@/types/userManagement';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { ArrowLeft, Edit, Shield, Key, User as UserIcon, Mail, Calendar } from 'lucide-react';
import { Link } from 'react-router-dom';

const UserDetail: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { actions } = useUserManagement();
  const { fetchUserById } = actions;

  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadUser = async () => {
      if (!id) {
        navigate('/user-management');
        return;
      }

      try {
        setIsLoading(true);
        setError(null);
        const userResponse = await fetchUserById(parseInt(id));
        if (userResponse) {
          setUser(userResponse);
        } else {
          setError('User not found');
        }
      } catch (err) {
        setError('Failed to load user data');
        console.error('Failed to load user data:', err);
      } finally {
        setIsLoading(false);
      }
    };

    loadUser();
  }, [id, fetchUserById, navigate]);

  const getUserInitials = (name: string) => {
    return name
      .split(' ')
      .map(word => word.charAt(0))
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  const getRoleColor = (roleName: string) => {
    const colors: { [key: string]: string } = {
      'admin': 'bg-red-100 text-red-800',
      'manager': 'bg-blue-100 text-blue-800',
      'user': 'bg-green-100 text-green-800',
      'editor': 'bg-purple-100 text-purple-800',
    };
    return colors[roleName.toLowerCase()] || 'bg-gray-100 text-gray-800';
  };

  const getPermissionColor = (permissionName: string) => {
    const colors: { [key: string]: string } = {
      'create': 'bg-green-100 text-green-800',
      'read': 'bg-blue-100 text-blue-800',
      'update': 'bg-yellow-100 text-yellow-800',
      'delete': 'bg-red-100 text-red-800',
    };
    const key = permissionName.toLowerCase().split(' ')[0] || permissionName.toLowerCase();
    return colors[key] || 'bg-gray-100 text-gray-800';
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading user details...</p>
        </div>
      </div>
    );
  }

  if (error || !user) {
    return (
      <div className="container mx-auto p-6 max-w-4xl">
        <div className="text-center py-12">
          <UserIcon className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
          <h2 className="text-2xl font-semibold mb-2">User Not Found</h2>
          <p className="text-muted-foreground mb-4">
            {error || "The user you're looking for doesn't exist."}
          </p>
          <Link to="/user-management">
            <Button>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to User Management
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <div className="flex items-center gap-4 mb-6">
        <Link to="/user-management">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to User Management
          </Button>
        </Link>
        <div className="flex items-center gap-4 flex-1">
          <Avatar className="h-16 w-16">
            <AvatarFallback className="bg-primary text-primary-foreground text-xl">
              {getUserInitials(user.name)}
            </AvatarFallback>
          </Avatar>
          <div>
            <h1 className="text-3xl font-bold tracking-tight">{user.name}</h1>
            <p className="text-muted-foreground mt-1">
              User details and permissions overview
            </p>
          </div>
        </div>
        <Link to={`/user-management/edit-user/${user.id}`}>
          <Button>
            <Edit className="h-4 w-4 mr-2" />
            Edit User
          </Button>
        </Link>
      </div>

      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <UserIcon className="h-5 w-5" />
              User Information
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="flex items-center gap-3">
                <Mail className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="text-sm font-medium">Email</p>
                  <p className="text-sm text-muted-foreground">{user.email}</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="text-sm font-medium">Email Verified</p>
                  <p className="text-sm text-muted-foreground">
                    {user.email_verified_at ? formatDate(user.email_verified_at) : 'Not verified'}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="text-sm font-medium">Created</p>
                  <p className="text-sm text-muted-foreground">{formatDate(user.created_at)}</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="text-sm font-medium">Last Updated</p>
                  <p className="text-sm text-muted-foreground">{formatDate(user.updated_at)}</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              Assigned Roles
            </CardTitle>
            <CardDescription>
              Roles assigned to this user and their associated permissions
            </CardDescription>
          </CardHeader>
          <CardContent>
            {user.roles.length > 0 ? (
              <div className="space-y-4">
                {user.roles.map((role) => (
                  <Card key={role.id} className="p-4 border-l-4 border-l-primary/20">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Badge className={getRoleColor(role.name)}>
                          {role.name}
                        </Badge>
                        <span className="text-sm text-muted-foreground">
                          Guard: {role.guard_name}
                        </span>
                      </div>
                    </div>
                    {role.permissions && role.permissions.length > 0 && (
                      <div>
                        <p className="text-sm font-medium mb-2">Role Permissions:</p>
                        <div className="flex flex-wrap gap-1">
                          {role.permissions.map((permission) => (
                            <Badge
                              key={permission.id}
                              variant="outline"
                              className={getPermissionColor(permission.name)}
                            >
                              {permission.name}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Shield className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">No roles assigned to this user</p>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Key className="h-5 w-5" />
              Direct Permissions
            </CardTitle>
            <CardDescription>
              Permissions granted directly to this user (beyond role permissions)
            </CardDescription>
          </CardHeader>
          <CardContent>
            {user.permissions.length > 0 ? (
              <div className="flex flex-wrap gap-2">
                {user.permissions.map((permission) => (
                  <Badge
                    key={permission.id}
                    variant="outline"
                    className={getPermissionColor(permission.name)}
                  >
                    {permission.name}
                  </Badge>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Key className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">No direct permissions assigned to this user</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default UserDetail;
"

-src/pages/UserManagement.tsx:"import React, { useState, useEffect } from 'react';
import { useUserManagement } from '@/hooks/useUserManagement';
import type { User, Role, Permission } from '@/types/userManagement';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { Users, UserPlus, Shield, Key, Edit, Trash2, Eye } from 'lucide-react';
import { Link } from 'react-router-dom';

const UserManagement: React.FC = () => {
  const {
    state: { users, roles, permissions, loading, error, pagination },
    actions: {
      fetchUsers,
      fetchRoles,
      fetchPermissions,
      deleteUser
    }
  } = useUserManagement();

  const [activeTab, setActiveTab] = useState<'users' | 'roles' | 'permissions'>('users');
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [userToDelete, setUserToDelete] = useState<User | null>(null);

  useEffect(() => {
    fetchUsers();
    fetchRoles();
    fetchPermissions();
  }, []);

  const handleDeleteUser = async () => {
    if (userToDelete) {
      await deleteUser(userToDelete.id);
      setDeleteDialogOpen(false);
      setUserToDelete(null);
      fetchUsers();
    }
  };

  const openDeleteDialog = (user: User) => {
    setUserToDelete(user);
    setDeleteDialogOpen(true);
  };

  const getUserInitials = (name: string) => {
    return name
      .split(' ')
      .map(word => word.charAt(0))
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  const getRoleColor = (roleName: string) => {
    const colors: { [key: string]: string } = {
      'admin': 'bg-red-100 text-red-800',
      'manager': 'bg-blue-100 text-blue-800',
      'user': 'bg-green-100 text-green-800',
      'editor': 'bg-purple-100 text-purple-800',
    };
    return colors[roleName.toLowerCase()] || 'bg-gray-100 text-gray-800';
  };

  const getPermissionColor = (permissionName: string) => {
    const colors: { [key: string]: string } = {
      'create': 'bg-green-100 text-green-800',
      'read': 'bg-blue-100 text-blue-800',
      'update': 'bg-yellow-100 text-yellow-800',
      'delete': 'bg-red-100 text-red-800',
    };
    const key = permissionName.toLowerCase().split(' ')[0] || permissionName.toLowerCase();
    return colors[key] || 'bg-gray-100 text-gray-800';
  };

  if (loading && !users.length && !roles.length && !permissions.length) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading user management...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">User Management</h1>
          <p className="text-muted-foreground mt-2">
            Manage users, roles, and permissions for your application
          </p>
        </div>
        <div className="flex gap-2">
          <Link to="/user-management/create-user">
            <Button>
              <UserPlus className="mr-2 h-4 w-4" />
              Create User
            </Button>
          </Link>
          <Link to="/user-management/create-role">
            <Button variant="outline">
              <Shield className="mr-2 h-4 w-4" />
              Create Role
            </Button>
          </Link>
          <Link to="/user-management/create-permission">
            <Button variant="outline">
              <Key className="mr-2 h-4 w-4" />
              Create Permission
            </Button>
          </Link>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'users' | 'roles' | 'permissions')}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="users" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            Users ({users.length})
          </TabsTrigger>
          <TabsTrigger value="roles" className="flex items-center gap-2">
            <Shield className="h-4 w-4" />
            Roles ({roles.length})
          </TabsTrigger>
          <TabsTrigger value="permissions" className="flex items-center gap-2">
            <Key className="h-4 w-4" />
            Permissions ({permissions.length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value="users" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Users</CardTitle>
              <CardDescription>
                Manage user accounts, roles, and permissions
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {users.map((user) => (
                  <Card key={user.id} className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <Avatar>
                          <AvatarFallback className="bg-primary text-primary-foreground">
                            {getUserInitials(user.name)}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <h3 className="font-semibold">{user.name}</h3>
                          <p className="text-sm text-muted-foreground">{user.email}</p>
                          <div className="flex gap-2 mt-2">
                            {user.roles && user.roles.length > 0 ? (
                              user.roles.map((role) => (
                                <Badge key={role.id} className={getRoleColor(role.name)}>
                                  {role.name}
                                </Badge>
                              ))
                            ) : (
                              <Badge variant="outline" className="text-muted-foreground">
                                No Role
                              </Badge>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Link to={`/user-management/user-detail/${user.id}`}>
                          <Button variant="ghost" size="sm">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </Link>
                        <Link to={`/user-management/edit-user/${user.id}`}>
                          <Button variant="ghost" size="sm">
                            <Edit className="h-4 w-4" />
                          </Button>
                        </Link>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => openDeleteDialog(user)}
                          className="text-destructive hover:text-destructive"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                    {user.permissions && user.permissions.length > 0 && (
                      <>
                        <Separator className="my-3" />
                        <div>
                          <p className="text-sm font-medium mb-2">Direct Permissions:</p>
                          <div className="flex flex-wrap gap-1">
                            {user.permissions.map((permission) => (
                              <Badge
                                key={permission.id}
                                variant="outline"
                                className={getPermissionColor(permission.name)}
                              >
                                {permission.name}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </>
                    )}
                  </Card>
                ))}

                {users.length === 0 && (
                  <div className="text-center py-8">
                    <Users className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">No users found</p>
                  </div>
                )}
              </div>

              {pagination && pagination.last_page > 1 && (
                <div className="flex justify-center mt-6">
                  <div className="flex gap-2">
                    {Array.from({ length: pagination.last_page }, (_, i) => i + 1).map((page) => (
                      <Button
                        key={page}
                        variant={pagination.current_page === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => fetchUsers({ page })}
                      >
                        {page}
                      </Button>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="roles" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Roles</CardTitle>
              <CardDescription>
                Manage user roles and their associated permissions
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {roles.map((role) => (
                  <Card key={role.id} className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-semibold flex items-center gap-2">
                          <Shield className="h-4 w-4" />
                          {role.name}
                        </h3>
                        <p className="text-sm text-muted-foreground mt-1">
                          Guard: {role.guard_name}
                        </p>
                        <div className="flex flex-wrap gap-1 mt-2">
                          {role.permissions && role.permissions.map((permission) => (
                            <Badge
                              key={permission.id}
                              variant="outline"
                              className={getPermissionColor(permission.name)}
                            >
                              {permission.name}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button variant="ghost" size="sm">
                          <Edit className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </Card>
                ))}

                {roles.length === 0 && (
                  <div className="text-center py-8">
                    <Shield className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">No roles found</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="permissions" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Permissions</CardTitle>
              <CardDescription>
                Manage system permissions and access controls
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {permissions.map((permission) => (
                  <Card key={permission.id} className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-semibold flex items-center gap-2">
                          <Key className="h-4 w-4" />
                          {permission.name}
                        </h3>
                        <p className="text-sm text-muted-foreground mt-1">
                          Guard: {permission.guard_name}
                        </p>
                      </div>
                      <Badge className={getPermissionColor(permission.name)}>
                        {permission.name.split(' ')[0] || 'Permission'}
                      </Badge>
                    </div>
                  </Card>
                ))}

                {permissions.length === 0 && (
                  <div className="col-span-full text-center py-8">
                    <Key className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-muted-foreground">No permissions found</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Delete User Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete User</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete {userToDelete?.name}? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteUser}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {error && (
        <div className="fixed bottom-4 right-4 bg-destructive text-destructive-foreground p-4 rounded-md shadow-lg">
          <p className="font-medium">Error</p>
          <p className="text-sm">{error}</p>
        </div>
      )}
    </div>
  );
};

export default UserManagement;"
